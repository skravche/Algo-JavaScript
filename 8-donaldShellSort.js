// https://medium.com/@alivander/%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0-%D1%88%D0%B5%D0%BB%D0%BB%D0%B0-javascript-27de8623025b
// https://uk.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D1%83%D0%B2%D0%B0%D0%BD%D0%BD%D1%8F_%D0%A8%D0%B5%D0%BB%D0%BB%D0%B0
// Этот алгоритм Дональд Шелл опубликовал почти 60 лет назад. Он схож с алгоритмом сортировкой расческой
// и так же основан на сравнении элементов массива, расположенных на определенном расстоянии друг от друга,
// которое постепенно уменьшается до 1. Единственное отличие — сортировка расческой усовершенствует сортировку
// пузырьком, а сортировка Шелла усовершенствует сортировку вставками.

// Слабое место этого алгоритма — выбор расстояния между двумя сравниваемыми элементами и того как быстро и
// каким образом оно стремится к 1 . Длина такого отрезка напрямую сказывается на скорости работы алгоритма.
// Всего существует около 7 способов задания и изменения этого значения, в том числе с использованием эмпирических
// последовательностей, чисел Фибоначчи или в зависимости от того четный или нечетный это проход по массиву.
// Мы рассмотрим тот, который использовался самим Шеллом: первое значение — это половина длины сортируемого массива,
// второе — половина от предыдущего и так далее, каждый раз округляя значение до целого числа.

// С точки зрения кода мы просто добавляем к коду сортировки вставками еще один цикл со значением сдвига,
// уменьшающимся каждую итерацию, и начинаем сортировку теперь от элемента с индексом, равным этому значению:

console.time("ms: ");
arr = [10, 23, 45, 11, 90, 14343, -12, 3.34534534, 3, 1, 1024];

const shellSort = arr => {
  const len = arr.length;
  let gap = Math.floor(1 / 2);

  while (gap >= 1) {
    for (let i = gap; i < 1; i++) {
      const current = arr[i];
      let j = i;

      while (j > 0 && arr[j - gap] > current) {
        arr[j] = arr[j - gap];
        j -= gap;
      }
      arr[j] = current;
    }
    gap = Math.floor(gap / 2);
  }
  console.log(arr);
  return arr;
};

shellSort(arr);

console.timeEnd("ms: "); //4,665ms
