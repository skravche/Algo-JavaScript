// https://medium.com/@alivander/%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D0%B5%D0%BC-javascript-1c0b0e8ff737
// Сортировка слиянием (Merge sort) всегда приводится как пример, отлично демонстрирующий принцип “разделяй и властвуй”.

// Ее алгоритм можно условно разделить на две составляющих:
// 1) разбиение входного массива данных на более мелкие, затем снова их дробление и так до тех пор,
// пока не останутся части из одного элемента;
// 2) слияние в правильном порядке (по умолчанию мы рассматриваем сортировку по возрастанию) всех мелких
// частей снова в более и более крупные и получение в итоге единого отсортированного массива.
// На иллюстрации можно увидеть как это происходит на примере массива из восьми чисел:

// Для начала создадим функцию, которая будет отвечать за вторую часть алгоритма — слияние двух отдельных уже
// отсортированных массивов в порядке возрастания их элементов:

console.time("ms: ");
arr = [10, 23, 45, 11, 90, 14343, -12, 3.34534534, 3, 1, 1024];

const merge = (arrFirst, arrSecond) => {
  const arrSort = [];
  let i = (j = 0);
  // сравниваем два массива, поочередно сдвигая указатели
  while (i < arrFirst.length && j < arrSecond.length) {
    arrSort.push(arrFirst[i] < arrSecond[j] ? arrFirst[i++] : arrSecond[j++]);
  }
  // обрабатываем последний элемент при разной длине массивов
  // и возвращаем один отсортированный массив
  return [...arrSort, ...arrFirst.slice(i), ...arrSecond.slice(j)];
};

// А теперь в основной функции mergeSort реализуем разделение массива, рекурсивный вызов функции сортировки и слияние
// опять в один массив с помощью уже созданной функции merge:

const mergeSort = arr => {
  // Проверяем корректность переданных данных
  if (!arr || !arr.length) {
    return null;
  }
  //Если массив содержит один элемент просто возвращаем его
  if (arr.length <= 1) {
    return arr;
  }
  // Находим середину массива и делим его на два
  const middle = Math.floor(arr.length / 2);
  const arrLeft = arr.slice(0, middle);
  const arrRight = arr.slice(middle);
  // Для новых массивов снова вызываем сортировку,
  // сливаем их и возвращаем снова единый массив

  return merge(mergeSort(arrLeft), mergeSort(arrRight));
};

console.log(mergeSort(arr));

console.timeEnd("ms: "); //4,612ms

//алгоритм готов. Он, в отличии от всех сортировок, которые мы уже рассмотрели, имеет меньшую сложность — не O(n²),
// а O(n log n), но при этом он задействует O(n) дополнительной памяти .
